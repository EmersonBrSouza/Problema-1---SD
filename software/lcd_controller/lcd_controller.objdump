
lcd_controller.elf:     file format elf32-littlenios2
lcd_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000284 memsz 0x00000290 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000012a4  2**0
                  CONTENTS
  2 .text         00000284  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000102a4  000102a4  000012a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000000  000102a4  000102a4  000012a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000000c  000102a4  000102a4  000012a4  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  000102b0  000102b0  000012a4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000110  00000000  00000000  000012c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000a00  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000050c  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000487  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001c0  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000049c  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000067  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00002e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000080  00000000  00000000  00002e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00003c85  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00003c95  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00003c9a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00003c9e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00003ca2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  00003ca6  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b0c  00000000  00000000  00003cdd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00035deb  00000000  00000000  000077e9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000102a4 l    d  .rodata	00000000 .rodata
000102a4 l    d  .rwdata	00000000 .rwdata
000102a4 l    d  .bss	00000000 .bss
000102b0 l    d  .main_memory	00000000 .main_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lcd_controller_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010244 g     F .text	0000002c alt_main
000102a4 g       *ABS*	00000000 __flash_rwdata_start
00010104 g     F .text	0000000c writeWord
0001029c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000102a8 g     O .bss	00000004 alt_argv
000182a4 g       *ABS*	00000000 _gp
00010100 g     F .text	00000004 sleep
00010000 g       *ABS*	00000000 __alt_mem_main_memory
000102b0 g       *ABS*	00000000 __bss_end
00010294 g     F .text	00000004 alt_dcache_flush_all
000102a4 g       *ABS*	00000000 __ram_rwdata_end
000102a4 g       *ABS*	00000000 __ram_rodata_end
000102b0 g       *ABS*	00000000 end
00019ca0 g       *ABS*	00000000 __alt_stack_pointer
00010020 g     F .text	0000003c _start
00010290 g     F .text	00000004 alt_sys_init
000102a4 g       *ABS*	00000000 __ram_rwdata_start
000102a4 g       *ABS*	00000000 __ram_rodata_start
000100f4 g     F .text	0000000c exitOption
000102b0 g       *ABS*	00000000 __alt_stack_base
000100dc g     F .text	0000000c showOption
000102a4 g       *ABS*	00000000 __bss_start
0001011c g     F .text	00000048 main
000102a4 g     O .bss	00000004 alt_envp
000102a4 g       *ABS*	00000000 __flash_rodata_start
00010270 g     F .text	00000020 alt_irq_init
0001005c g     F .text	00000028 initializeDisplayViaHardware
000102ac g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
000100e8 g     F .text	0000000c enterOption
00010084 g     F .text	0000002c initializeDisplayViaSoftware
000102a4 g       *ABS*	00000000 _edata
000102b0 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000100b0 g     F .text	00000018 nextOption
00019ca0 g       *ABS*	00000000 __alt_data_end
000100c8 g     F .text	00000014 previousOption
0001000c g       .entry	00000000 _exit
00010110 g     F .text	0000000c clearScreen
00010298 g     F .text	00000004 alt_icache_flush_all
00010164 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee72814 	ori	sp,sp,40096
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a0a914 	ori	gp,gp,33444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1080a914 	ori	r2,r2,676

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c0ac14 	ori	r3,r3,688

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff63a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00101640 	call	10164 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00102440 	call	10244 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff63b8>

0001005c <initializeDisplayViaHardware>:
  return 0;
}


void initializeDisplayViaHardware () {
	ALT_CI_CONTROLLERLCD_0(START_8BITS_1LINE,0);
   1005c:	0005883a 	mov	r2,zero
   10060:	00c00c04 	movi	r3,48
   10064:	1887c032 	custom	0,r3,r3,r2
	sleep(5000);
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY,0);
   10068:	00c00044 	movi	r3,1
   1006c:	1887c032 	custom	0,r3,r3,r2
	sleep(5000);
	ALT_CI_CONTROLLERLCD_0(RETURN_HOME,0);
   10070:	00c00084 	movi	r3,2
   10074:	1887c032 	custom	0,r3,r3,r2
	sleep(5000);
	ALT_CI_CONTROLLERLCD_0(DISPLAY_ON_CURSOR_OFF,0);
   10078:	00c00304 	movi	r3,12
   1007c:	1885c032 	custom	0,r2,r3,r2
   10080:	f800283a 	ret

00010084 <initializeDisplayViaSoftware>:
}

void initializeDisplayViaSoftware() {
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, START_8BITS_1LINE);
   10084:	008000b4 	movhi	r2,2
   10088:	10840c04 	addi	r2,r2,4144
   1008c:	00c00c04 	movi	r3,48
   10090:	10c00035 	stwio	r3,0(r2)
	sleep(200);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, CLEAR_DISPLAY);
   10094:	00c00044 	movi	r3,1
   10098:	10c00035 	stwio	r3,0(r2)
	sleep(500);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, RETURN_HOME);
   1009c:	00c00084 	movi	r3,2
   100a0:	10c00035 	stwio	r3,0(r2)
	sleep(500);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, DISPLAY_ON_CURSOR_OFF);
   100a4:	00c00304 	movi	r3,12
   100a8:	10c00035 	stwio	r3,0(r2)
   100ac:	f800283a 	ret

000100b0 <nextOption>:
}

int nextOption (int currentOption) {
	if (currentOption == MAX_OPTIONS_NUMBER - 1) return 0;
   100b0:	00800104 	movi	r2,4
   100b4:	20800226 	beq	r4,r2,100c0 <nextOption+0x10>
   100b8:	2005883a 	mov	r2,r4
   100bc:	f800283a 	ret
   100c0:	0005883a 	mov	r2,zero
	return currentOption++;
}
   100c4:	f800283a 	ret

000100c8 <previousOption>:

int previousOption (int currentOption) {
	if (currentOption == 0) return MAX_OPTIONS_NUMBER - 1;
   100c8:	20000226 	beq	r4,zero,100d4 <previousOption+0xc>
   100cc:	2005883a 	mov	r2,r4
   100d0:	f800283a 	ret
   100d4:	00800104 	movi	r2,4
	return currentOption--;
}
   100d8:	f800283a 	ret

000100dc <showOption>:
   100dc:	00800044 	movi	r2,1
   100e0:	1005c032 	custom	0,r2,r2,zero
   100e4:	f800283a 	ret

000100e8 <enterOption>:
   100e8:	00800044 	movi	r2,1
   100ec:	1005c032 	custom	0,r2,r2,zero
   100f0:	f800283a 	ret

000100f4 <exitOption>:
	int cycles = milliseconds * 1000;
	while ( i < cycles ) { i++; }
}

void writeWord(char* word) {
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY, 0x0);
   100f4:	00800044 	movi	r2,1
   100f8:	1005c032 	custom	0,r2,r2,zero
   100fc:	f800283a 	ret

00010100 <sleep>:

void exitOption (int currentOption) {
	showOption(currentOption);
}

void sleep (int milliseconds) {
   10100:	f800283a 	ret

00010104 <writeWord>:
	int cycles = milliseconds * 1000;
	while ( i < cycles ) { i++; }
}

void writeWord(char* word) {
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY, 0x0);
   10104:	00800044 	movi	r2,1
   10108:	1005c032 	custom	0,r2,r2,zero
   1010c:	f800283a 	ret

00010110 <clearScreen>:
		i++;
	}
}

void clearScreen() {
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY,0);
   10110:	00800044 	movi	r2,1
   10114:	1005c032 	custom	0,r2,r2,zero
   10118:	f800283a 	ret

0001011c <main>:
#define START_4BITS_2LINE 0x28

#define MAX_OPTIONS_NUMBER 5

int main()
{ 
   1011c:	deffff04 	addi	sp,sp,-4
   10120:	dfc00015 	stw	ra,0(sp)
  int in = 0 ;
  int currentOption = 0;

  initializeDisplayViaSoftware();
   10124:	00100840 	call	10084 <initializeDisplayViaSoftware>
  sleep(2000);

  while (TRUE) {
	in = IORD_ALTERA_AVALON_PIO_DATA(PUSH_BUTTONS_BASE);
   10128:	014000b4 	movhi	r5,2
   1012c:	29440804 	addi	r5,r5,4128

	switch (in) {
   10130:	01000084 	movi	r4,2
   10134:	018000c4 	movi	r6,3
   10138:	01c00104 	movi	r7,4
   1013c:	00800044 	movi	r2,1

  initializeDisplayViaSoftware();
  sleep(2000);

  while (TRUE) {
	in = IORD_ALTERA_AVALON_PIO_DATA(PUSH_BUTTONS_BASE);
   10140:	28c00037 	ldwio	r3,0(r5)

	switch (in) {
   10144:	19000526 	beq	r3,r4,1015c <main+0x40>
   10148:	20c00216 	blt	r4,r3,10154 <main+0x38>
   1014c:	18800326 	beq	r3,r2,1015c <main+0x40>
   10150:	003ffb06 	br	10140 <__alt_data_end+0xffff64a0>
   10154:	19800126 	beq	r3,r6,1015c <main+0x40>
   10158:	19fff91e 	bne	r3,r7,10140 <__alt_data_end+0xffff64a0>
	int cycles = milliseconds * 1000;
	while ( i < cycles ) { i++; }
}

void writeWord(char* word) {
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY, 0x0);
   1015c:	1007c032 	custom	0,r3,r2,zero
   10160:	003ff706 	br	10140 <__alt_data_end+0xffff64a0>

00010164 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10164:	deffff04 	addi	sp,sp,-4
   10168:	01000074 	movhi	r4,1
   1016c:	01400074 	movhi	r5,1
   10170:	dfc00015 	stw	ra,0(sp)
   10174:	2100a904 	addi	r4,r4,676
   10178:	2940a904 	addi	r5,r5,676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1017c:	2140061e 	bne	r4,r5,10198 <alt_load+0x34>
   10180:	01000074 	movhi	r4,1
   10184:	01400074 	movhi	r5,1
   10188:	21000804 	addi	r4,r4,32
   1018c:	29400804 	addi	r5,r5,32
   10190:	2140121e 	bne	r4,r5,101dc <alt_load+0x78>
   10194:	00000b06 	br	101c4 <alt_load+0x60>
   10198:	00c00074 	movhi	r3,1
   1019c:	18c0a904 	addi	r3,r3,676
   101a0:	1907c83a 	sub	r3,r3,r4
   101a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101a8:	10fff526 	beq	r2,r3,10180 <__alt_data_end+0xffff64e0>
    {
      *to++ = *from++;
   101ac:	114f883a 	add	r7,r2,r5
   101b0:	39c00017 	ldw	r7,0(r7)
   101b4:	110d883a 	add	r6,r2,r4
   101b8:	10800104 	addi	r2,r2,4
   101bc:	31c00015 	stw	r7,0(r6)
   101c0:	003ff906 	br	101a8 <__alt_data_end+0xffff6508>
   101c4:	01000074 	movhi	r4,1
   101c8:	01400074 	movhi	r5,1
   101cc:	2100a904 	addi	r4,r4,676
   101d0:	2940a904 	addi	r5,r5,676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   101d4:	2140101e 	bne	r4,r5,10218 <alt_load+0xb4>
   101d8:	00000b06 	br	10208 <alt_load+0xa4>
   101dc:	00c00074 	movhi	r3,1
   101e0:	18c00804 	addi	r3,r3,32
   101e4:	1907c83a 	sub	r3,r3,r4
   101e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101ec:	10fff526 	beq	r2,r3,101c4 <__alt_data_end+0xffff6524>
    {
      *to++ = *from++;
   101f0:	114f883a 	add	r7,r2,r5
   101f4:	39c00017 	ldw	r7,0(r7)
   101f8:	110d883a 	add	r6,r2,r4
   101fc:	10800104 	addi	r2,r2,4
   10200:	31c00015 	stw	r7,0(r6)
   10204:	003ff906 	br	101ec <__alt_data_end+0xffff654c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10208:	00102940 	call	10294 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1020c:	dfc00017 	ldw	ra,0(sp)
   10210:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10214:	00102981 	jmpi	10298 <alt_icache_flush_all>
   10218:	00c00074 	movhi	r3,1
   1021c:	18c0a904 	addi	r3,r3,676
   10220:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10224:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10228:	18bff726 	beq	r3,r2,10208 <__alt_data_end+0xffff6568>
    {
      *to++ = *from++;
   1022c:	114f883a 	add	r7,r2,r5
   10230:	39c00017 	ldw	r7,0(r7)
   10234:	110d883a 	add	r6,r2,r4
   10238:	10800104 	addi	r2,r2,4
   1023c:	31c00015 	stw	r7,0(r6)
   10240:	003ff906 	br	10228 <__alt_data_end+0xffff6588>

00010244 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10244:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10248:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1024c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10250:	00102700 	call	10270 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10254:	00102900 	call	10290 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10258:	d1a00017 	ldw	r6,-32768(gp)
   1025c:	d1600117 	ldw	r5,-32764(gp)
   10260:	d1200217 	ldw	r4,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10264:	dfc00017 	ldw	ra,0(sp)
   10268:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1026c:	001011c1 	jmpi	1011c <main>

00010270 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10270:	deffff04 	addi	sp,sp,-4
   10274:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
   10278:	001029c0 	call	1029c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1027c:	00800044 	movi	r2,1
   10280:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10284:	dfc00017 	ldw	ra,0(sp)
   10288:	dec00104 	addi	sp,sp,4
   1028c:	f800283a 	ret

00010290 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10290:	f800283a 	ret

00010294 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10294:	f800283a 	ret

00010298 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10298:	f800283a 	ret

0001029c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1029c:	000170fa 	wrctl	ienable,zero
   102a0:	f800283a 	ret
