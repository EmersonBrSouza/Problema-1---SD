/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "unistd.h"

// void sleep(int ms);

void initializeDisplayViaHardware();
void initializeDisplayViaSoftware();

int nextOption (int currentOption);
int previousOption (int currentOption);
void showOption (int currentOption);
void enterOption (int currentOption);
void exitOption (int currentOption);


void writeWord(char* word);
void clearScreen();

#define TRUE 1
#define FALSE 0

#define CLEAR_DISPLAY 0x01
#define CLEAR_DISPLAY_B 0b110000000001

#define RETURN_HOME 0x02
#define RETURN_HOME_B 0b110000000010

#define MOVE_CURSOR_LEFT 0x10
#define MOVE_CURSOR_LEFT_B 0b110000001010

#define MOVE_CURSOR_RIGHT 0x14
#define MOVE_CURSOR_RIGHT_B 0b110000001110

#define DISPLAY_OFF 0x08
#define DISPLAY_OFF_B 0b010000001000

#define DISPLAY_ON_CURSOR_ON 0x0E
#define DISPLAY_ON_CURSOR_ON_B 0b110000001110

#define DISPLAY_ON_CURSOR_OFF 0x0C
#define DISPLAY_ON_CURSOR_OFF_B 0b110000001100

#define START_8BITS_1LINE 0x30
#define START_8BITS_1LINE_B 0b110000110000

#define START_8BITS_2LINE 0x38
#define START_8BITS_2LINE_B 0b110000111000

#define START_4BITS_1LINE 0x20
#define START_4BITS_1LINE_B 0b110000100000

#define START_4BITS_2LINE 0x28
#define START_4BITS_2LINE_B 0b110000101000

#define ENTRY_MODE 0x06
#define ENTRY_MODE_B 0b110000000110

#define WRITE_DATA 0x25

#define MAX_OPTIONS_NUMBER 5

int main()
{ 
  int in = 0 ;
  int currentOption = 0;

  initializeDisplayViaSoftware();
  usleep(2000);

  while (TRUE) {
	in = IORD_ALTERA_AVALON_PIO_DATA(PUSH_BUTTONS_BASE);

	switch (in) {
		case 1: // Show Next Option
			currentOption = nextOption(currentOption);
			showOption(currentOption);
			break;
		case 2: // Show Previous Option
			currentOption = previousOption(currentOption);
			showOption(currentOption);
			break;
		case 3: // Enter in the choosed option
			enterOption(currentOption);
			break;
		case 4: // Back to menu
			exitOption(currentOption);
			break;
	}

	usleep(20);
  }
  return 0;
}


void initializeDisplayViaHardware () {
	ALT_CI_CONTROLLERLCD_0(START_8BITS_1LINE,0);
	usleep(5000);
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY,0);
	usleep(5000);
	ALT_CI_CONTROLLERLCD_0(RETURN_HOME,0);
	usleep(5000);
	ALT_CI_CONTROLLERLCD_0(DISPLAY_ON_CURSOR_OFF,0);
}

void initializeDisplayViaSoftware() {

	 usleep(15000);
	 ALT_CI_CONTROLLERLCD_0(START_8BITS_1LINE,0);
	 usleep(4100);
	 ALT_CI_CONTROLLERLCD_0(START_8BITS_1LINE,0);
	 usleep(100);
	 ALT_CI_CONTROLLERLCD_0(START_8BITS_1LINE,0);
	 usleep(100);
	 ALT_CI_CONTROLLERLCD_0(START_8BITS_1LINE,0);
	 usleep(100);

	 IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, DISPLAY_OFF_B);
	 usleep(100);


	 IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, DISPLAY_ON_CURSOR_OFF_B);
	 usleep(100);

	 IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, ENTRY_MODE_B);
	 usleep(100);

	 //IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, MOVE_CURSOR_RIGHT_B);
	 IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, RETURN_HOME_B);
	 usleep(2000);

	 IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, CLEAR_DISPLAY_B);
	 usleep(2000);

	 IOWR_ALTERA_AVALON_PIO_DATA(LCD_OUTPUT_BASE, 0b110001100000);
	 // writeWord(0);
}

int nextOption (int currentOption) {
	if (currentOption == MAX_OPTIONS_NUMBER - 1) return 0;
	return currentOption++;
}

int previousOption (int currentOption) {
	if (currentOption == 0) return MAX_OPTIONS_NUMBER - 1;
	return currentOption--;
}

void showOption (int currentOption) {
	char *a[5];
	a[0] = "Opção 1";
	a[1] = "Opção 2";
	a[2] = "Opção 3";
	a[3] = "Opção 4";
	a[4] = "Opção 5";

	writeWord(a[currentOption]);
}

void enterOption (int currentOption) {
	char *a[5];
	a[0] = "Escolheu 1";
	a[1] = "Escolheu 2";
	a[2] = "Escolheu 3";
	a[3] = "Escolheu 4";
	a[4] = "Escolheu 5";

	writeWord(a[currentOption]);
}

void exitOption (int currentOption) {
	showOption(currentOption);
}

/*void sleep (int milliseconds) {
	volatile int i = 0;
	int cycles = milliseconds * 1000;
	while ( i < cycles ) { i++; }
}*/

void writeWord(char* word) {
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY, 0x0);
	usleep(50);
	int i = 0;

	while (i < sizeof(word)){
		ALT_CI_CONTROLLERLCD_0(WRITE_DATA, word[i]);
		usleep(50);
		ALT_CI_CONTROLLERLCD_0(MOVE_CURSOR_RIGHT, 0x0);
		usleep(50);
		i++;
	}
}

void clearScreen() {
	ALT_CI_CONTROLLERLCD_0(CLEAR_DISPLAY,0);
	usleep(50);
	ALT_CI_CONTROLLERLCD_0(RETURN_HOME,0);
}
